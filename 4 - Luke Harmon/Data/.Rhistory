s$Min_sample_size <- Ns[[i]]
s$N_species_in_model <- nrow(r_df)
res <- reshape(s, idvar = c("Min_sample_size", "N_species_in_model"), timevar = "par", direction = "wide")
names(res) <- nam
}
}
res_df[i,] <- res
}
suppressWarnings(
res_sum <- res_df[,2:length(res_df)] %>%
select(-N_species_in_model) %>%
gather(key = stat, value = val) %>%
mutate(val = as.numeric(val),
stat = factor(stat, levels = nam)) %>%
group_by(stat)%>%
summarise_all( funs(mean = mean(., na.rm =TRUE),
sd = sd(., na.rm =TRUE),
n = n())) %>%
mutate(se = sd / sqrt(n),
CI_low = mean - qnorm(0.975) * se,
CI_high = mean + qnorm(0.975) * se) %>%
select(-n,-sd, -se) %>%
left_join(original_values, by = "stat") %>%
mutate_at(vars(-stat), round, 3)%>%
as.data.frame()
)
res_df <- na.omit(res_df)
return(list(pgls=pgls, r2pred=r2pred, stats=res_sum, raw=res_df))
}
leave_one_out_se <- function(formula, tree, df, method = "ML", model = "BM", treename = "Short", se=NULL) {
require(phytools)
require(dplyr)
require(rr2)
influ_threshold = 50
correlation = ifelse(model == "BM","corBrownian",
ifelse(model == "OU","corMartins",
ifelse(model == "lambda","corPagel","err")
))
correlationgls = ifelse(model == "BM","corBrownian(1, phy = tree)",
ifelse(model == "OU","corMartins(1, phy = tree, fixed = FALSE)",
ifelse(model == "lambda","corPagel(1, phy = tree, fixed = FALSE)","err")
))
if (correlation == "err") {stop("Don't recognize evolutionary model. must be BM,OU or lambda")}
if (class(formula) != "formula")
stop("formula must be class 'formula'")
# Sometimes pgls.SEy fails so then we can use gls this is the switch variable for this
USEGLS = FALSE
# incooperate SE in y
if (!is.null(se)){
fullse = setNames(df[, se], df[,treename])
} else {
fullse = NULL
}
pgls <- tryCatch(
{pgls.SEy(formula, data = df, tree = tree,
corClass =eval(parse(text=correlation)), se=fullse, method = method)},
error=function(cond){
message("\npgls.SEy throws an error we will use gls() in this analysis!")
message(paste("ERROR:", cond))
return(
tryCatch(
{gls(model = formula,
correlation = eval(parse(text=correlationgls)),
data = df, method = method)},
error=function(cond) {
message("gls also did not work!")
stop("aborting run!")
}
)
)},
warning=function(cond){
})
if(!sum(grepl("weights", pgls$call)) > 0) {USEGLS = TRUE}
s_base <- summary(pgls)
print(s_base)
nVars = nrow(s_base$tTable)
r2pred = round(rr2::R2.pred(pgls),3)
# pgls_table
res_df <- as.data.frame(matrix(NA, ncol = 1+(4*nVars), nrow = nrow(df)))
s <- as.data.frame(summary(pgls)$tTable)
s$par <- row.names(s); s$sp_removed <- "None"
s_res <- reshape(s, idvar = "sp_removed", timevar = "par", direction = "wide")
nam <- gsub("\\(|\\)","",names(s_res))
nam <- gsub("Std.Error","SE",nam)
nam <- gsub("(.+)\\.(.+)","\\2:\\1",nam)
names(res_df) <- nam
original_values <- as.data.frame(t(s_res[2:length(s_res)]))
original_values$par <- as.character(nam[2:length(nam)])
names(original_values) <- c("full_model", "par")
for (i in 1:length(df[,treename])){
index = !df[,treename] == df[i,treename]
r_df <- df[index,]
rownames(r_df) <- r_df[,treename]
r_tree <- drop.tip(tree, tip = df[i,treename])
if (!is.null(se)){
r_se = setNames(r_df[, se], r_df[,treename])
} else {
r_se = NULL
}
if(USEGLS == FALSE) {
pgls_r <- tryCatch(
{pgls.SEy(formula, data = r_df, tree = r_tree,
corClass =eval(parse(text=correlation)), se=r_se, method = method)},
error=function(cond){
message("\npgls.SEy did not converge, trying gls")
message(paste("ERROR:", cond))
return(
tryCatch(
{gls(model = formula,
correlation = eval(parse(text=gsub(pattern = "tree", replacement = "r_tree", correlationgls))),
data = r_df, method = method)},
error=function(cond) {
message("\ngls also did not work! Skipping this iteration.")
return(NA)
}
))},
warning=function(cond){
})
} else {
pgls_r <- tryCatch(
{gls(model = formula,
correlation = eval(parse(text=gsub(pattern = "tree", replacement = "r_tree", correlationgls))),
data = r_df, method = method)},
error=function(cond) {
message("\ngls did not work! Skipping this iteration.")
return(NA)
})
}
if(is.na(pgls_r[1])){
res <- c(Ns[[i]], rep(NA,7))
} else {
s <- as.data.frame(summary(pgls_r)$tTable)
s$par <- row.names(s)
s$sample <- df[i,treename]
res <- reshape(s, idvar = "sample", timevar = "par", direction = "wide")
names(res) <- nam
}
res_df[i,] <- res
}
# Now calculate statistics
res_sum <- res_df[,2:ncol(res_df)] %>%
gather(key = par, value = val) %>%
mutate(val = as.numeric(val),
par = factor(par, levels = nam)) %>%
group_by(par)%>%
summarise_all( funs(mean = mean,
sd = sd,
n = n())) %>%
mutate(se = sd / sqrt(n),
CI_low = mean - qnorm(0.975) * se,
CI_high = mean + qnorm(0.975) * se
) %>%
select(-n,-sd, -se) %>%
mutate_at(vars(-par), round, 3)%>%
as.data.frame() %>%
left_join(original_values) %>%
mutate_if(is.numeric, round,3)
# finding outliers and how strong their influence is
res_long <- res_df %>%
gather(key = par, value = val, -sp_removed) %>%
mutate(val = as.numeric(val)) %>%
left_join(original_values) %>%
# only do the influence measure for the Values
filter(grepl("Value", par)) %>%
as.data.frame()
res_ls <- split(res_long, res_long$par)
res_ls <- lapply(res_ls, find_influ)
outliers <- do.call(rbind, res_ls) %>%
select(-full_model) %>%
filter(pcnt_D >= influ_threshold) %>%
arrange(desc(pcnt_D)) %>%
mutate_if(is.numeric, round, 3)
return(list(pgls=pgls, r2pred=r2pred, stats=res_sum, raw=mutate_if(res_df, is.numeric, round, 3), outliers=outliers))
}
leave_one_out <- function(formula, tree, df, method = "ML", model = "BM", treename = "Short") {
require(dplyr)
correlation = ifelse(model == "BM","corBrownian(1, phy = tree)",
ifelse(model == "OU","corMartins(1, phy = tree, fixed = FALSE)",
ifelse(model == "lambda","corPagel(1, phy = tree, fixed = FALSE)","err")
))
if (correlation == "err") {stop("Don't recognize evolutionary model. must be BM,OU or lambda")}
if (class(formula) != "formula")
stop("formula must be class 'formula'")
pgls <- gls(model = formula,
correlation = eval(parse(text=correlation)),
data = df, method = method)
print(summary(pgls))
pgls_table
res_df <- as.data.frame(matrix(NA, ncol = 7, nrow = nrow(df)))
nam <- c("sp_removed", "intercept", "se.intercept",
"pval.intercept", "estimate", "se.estimate", "pval.estimate")
names(res_df) <- nam
for (i in 1:length(df[,treename])){
index = !df[,treename] == df[i,treename]
r_df <- df[index,]
rownames(r_df) <- r_df[,treename]
r_tree <- drop.tip(tree, tip = df[i,treename])
pgls_r <- tryCatch(
{gls(model = formula,
correlation = eval(parse(text=gsub(pattern = "tree", replacement = "r_tree", correlation))),
data = r_df, method = method)},
error=function(cond){
message("PGLS did not converge")
message(paste("Number of species in tree:", nrow(r_df)))
message(cond)
return(NA)},
warning=function(cond){
})
if(is.na(pgls_r[[1]])){
res <- c(Ns[[i]], rep(NA,7))
} else {
s <- summary(pgls_r)$tTable
res <- c(df[i,treename], s[1,c(1,2,4)],s[2,c(1,2,4)])
}
res_df[i,] <- res
}
res_sum <- res_df[,2:7] %>%
gather(key = stat, value = val) %>%
mutate(val = as.numeric(val),
stat = factor(stat, levels = nam)) %>%
group_by(stat)%>%
summarise_all( funs(mean = mean,
sd = sd,
n = n())) %>%
mutate(se = sd / sqrt(n),
CI_low = mean - qnorm(0.975) * se,
CI_high = mean + qnorm(0.975) * se) %>%
select(-n,-sd, -se) %>%
mutate_at(vars(-stat), round, 3)%>%
as.data.frame()
return(list(pgls=pgls, stats=res_sum, raw=res_df))
}
pgls_for_sample_size <- function(formula, tree, df, SScol, min_species = 10, method = "ML", model = "BM", treename = "Short") {
require(dplyr)
correlation = ifelse(model == "BM","corBrownian(1, phy = tree)",
ifelse(model == "OU","corMartins(9, phy = tree, fixed = FALSE)",
ifelse(model == "lambda","corPagel(1, phy = tree, fixed = FALSE)","err")
))
if (correlation == "err") {stop("Don't recognize evolutionary model. must be BM,OU or lambda")}
if (class(formula) != "formula")
stop("formula must be class 'formula'")
pgls <- gls(model = formula,
correlation = eval(parse(text=correlation)),
data = df, method = method)
print(summary(pgls))
Ns = sort(unique(df[,SScol]))
res_df <- as.data.frame(matrix(NA, ncol = 8, nrow = length(Ns)))
# for this analysis we also need to output how many species were in each model
nam <- c("Min_sample_size", "N_species_in_model", "intercept", "se.intercept",
"pval.intercept", "estimate", "se.estimate", "pval.estimate")
names(res_df) <- nam
for (i in 1:length(Ns)){
# remove everything with lower sample size
index = df[,SScol] >= Ns[[i]]
r_df <- df[index,]
if(nrow(r_df) < min_species){
res <- c(Ns[[i]], rep(NA,7))
} else {
rownames(r_df) <- r_df[,treename]
r_tree <- drop.tip(tree, tip = df[!index,treename])
pgls_r <- tryCatch(
{gls(model = formula,
correlation = eval(parse(text=gsub(pattern = "tree", replacement = "r_tree", correlation))),
data = r_df, method = method)},
error=function(cond){
message("PGLS did not converge")
message(paste("Number of species in tree:", nrow(r_df)))
message(cond)
return(NA)},
warning=function(cond){
})
# pgls_r <- gls(model = formula,
#               correlation = eval(parse(text=gsub(pattern = "tree", replacement = "r_tree", correlation))),
#               data = r_df, method = method)
if(is.na(pgls_r[[1]])){
res <- c(Ns[[i]], rep(NA,7))
} else {
s <- summary(pgls_r)$tTable
res <- c(Ns[[i]],nrow(r_df), s[1,c(1,2,4)],s[2,c(1,2,4)])
}
}
res_df[i,] <- res
}
res_sum <- res_df[,2:7] %>%
select(-N_species_in_model) %>%
gather(key = stat, value = val) %>%
mutate(val = as.numeric(val),
stat = factor(stat, levels = nam)) %>%
group_by(stat)%>%
summarise_all( funs(mean = mean(., na.rm =TRUE),
sd = sd(., na.rm =TRUE),
n = n())) %>%
mutate(se = sd / sqrt(n),
CI_low = mean - qnorm(0.975) * se,
CI_high = mean + qnorm(0.975) * se) %>%
select(-n,-sd, -se) %>%
mutate_at(vars(-stat), round, 3)%>%
as.data.frame()
return(list(pgls=pgls, stats=res_sum, raw=res_df))
}
pgls <- pgls_for_sample_size_se(SA_mean ~ Rec_binary, SScol = "N_SA", se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
min_species = 40, method = "ML", model = "OU")
install.packages("rr2")
pgls <- pgls_for_sample_size_se(SA_mean ~ Rec_binary, SScol = "N_SA", se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
min_species = 40, method = "ML", model = "OU")
loo <- leave_one_out_se(SA_mean ~ Rec_binary,  se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
method = "ML", model = "OU")
gls_vanilla <- gls(SA_mean ~ Rec_binary, data = comp_df[[1]], correlation = corMartins(1, phy = comp_df[[2]]))
summary(gls_vanilla)
pglsSEy <- pgls.SEy(SA_mean ~ Rec_binary, data = comp_df[[1]], tree = comp_df[[2]],
corClass = eval(parse(text="corMartins")))
pgls <- pgls_for_sample_size_se(SA_mean ~ Rec_binary, SScol = "N_SA", se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
min_species = 40, method = "ML", model = "OU")
loo <- leave_one_out_se(SA_mean ~ Rec_binary,  se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
method = "ML", model = "OU")
pgls
loo
gls_vanilla <- gls(SA_mean ~ Rec_binary, data = comp_df[[1]], correlation = corMartins(1, phy = comp_df[[2]]))
summary(gls_vanilla)
pglsSEy <- pgls.SEy(SA_mean ~ Rec_binary, data = comp_df[[1]], tree = comp_df[[2]],
corClass = eval(parse(text="corMartins")))
?pgls.SEy
Rec_binary
comp_df
comp_df[[1]][,"SA_mean"]->x
hist(x)
hist(x)
logit(x)
pgls <- pgls_for_sample_size_se(SA_mean ~ Rec_binary, SScol = "N_SA", se = "SA_stderr",
tree = comp_df[[2]], df = comp_df[[1]],
min_species = 40, method = "ML", model = "OU")
comp_df[[2]]$edge.length
newTree <- comp_df[[2]]
newTree$edge.length <- newTree$edge.length * 100
pgls <- pgls_for_sample_size_se(SA_mean ~ Rec_binary, SScol = "N_SA", se = "SA_stderr",
tree = newTree, df = comp_df[[1]],
min_species = 40, method = "ML", model = "OU")
pgls
loo <- leave_one_out_se(SA_mean ~ Rec_binary,  se = "SA_stderr",
tree = newTree, df = comp_df[[1]],
method = "ML", model = "OU")
loo
?dtt
require(treeplyr)
tree <- geiger::sim.bdtree(stop="taxa", n=50, seed=1)
dat <- data.frame(X1 = rnorm(50), X2 = rnorm(50), X3 = rnorm(50),
taxa=c(tree$tip.label[1:40], paste("s", 51:60, sep="")),
D1=sample(c("Hello", "World"), 50, replace=TRUE), D2=rbinom(50,1,0.5),
D3=0.3+rbinom(50, 4, c(0.1,0.1,0.5,0.3)), XNA1 = c(rep(NA, 10), rnorm(40)))
install_github("uyedaj/treeplyr")
require(devtools)
install.packages("devtools")
require(devtools)
install_github("uyedaj/treeplyr")
install_github("uyedaj/treeplyr")
require(treeplyr)
install_github("uyedaj/treeplyr")
install_github("uyedaj/treeplyr")
install_github("uyedaj/treeplyr")
require(treeplyr)
tree <- geiger::sim.bdtree(stop="taxa", n=50, seed=1)
dat <- data.frame(X1 = rnorm(50), X2 = rnorm(50), X3 = rnorm(50),
taxa=c(tree$tip.label[1:40], paste("s", 51:60, sep="")),
D1=sample(c("Hello", "World"), 50, replace=TRUE), D2=rbinom(50,1,0.5),
D3=0.3+rbinom(50, 4, c(0.1,0.1,0.5,0.3)), XNA1 = c(rep(NA, 10), rnorm(40)))
td <- make.treedata(tree, dat)
td
filter(td, X1 + X2 > 0 & D1 == "Hello")
write.treee
write.tree
write.tree(tree, "~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/sampleTree.phy")
write.tree(tree, "~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/sampleTree.phy")
write.csv(dat, ""~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/sampleData.csv")
td <- make.treedata(tree, dat)
summary(td)
filter(td, X1 + X2 > 0 & D1 == "Hello")
write.csv(dat, ""~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/sampleData.csv")
td <- make.treedata(tree, dat)
summary(td)
filter(td, X1 + X2 > 0 & D1 == "Hello")
write.csv(dat, "~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/sampleData.csv")
setwd(""~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/")
setwd("~/Documents/teaching/Evolution-2019-Phylogenetic-Methods-Workshop/4 - Luke Harmon/Data/")
tree <- read.tree("Data/sampleTree.phy")
dat <- read.csv("Data/sampleData.csv")
dat
td <- make.treedata(tree, dat)
td <- make.treedata(tree, dat)
summary(td)
require(geiger)
name.check(tree, dat)
namecheck(tree, dat)
?name.check
install.packages("geiger")
install.packages("geiger")
require(geiger)
namecheck(tree, dat)
name.check(tree, dat)
dat
summary(td)
tree <- geiger::sim.bdtree(stop="taxa", n=50, seed=1)
dat <- data.frame(X1 = rnorm(50), X2 = rnorm(50), X3 = rnorm(50),
taxa=c(tree$tip.label[1:40], paste("s", 51:60, sep="")),
D1=sample(c("Hello", "World"), 50, replace=TRUE), D2=rbinom(50,1,0.5),
D3=0.3+rbinom(50, 4, c(0.1,0.1,0.5,0.3)), XNA1 = c(rep(NA, 10), rnorm(40)))
td <- make.treedata(tree, dat)
require(treeplyr)
td <- make.treedata(tree, dat)
td
require(ape)
tree <- read.tree("Data/sampleTree.phy")
dat <- read.csv("Data/sampleData.csv")
# First notice some problems typical of comparative data
require(geiger)
name.check(tree, dat)
# Now we can glue these two together to make a "treedata" object
td <- make.treedata(tree, dat)
summary(td)
dat
dat <- data.frame(X1 = rnorm(50), X2 = rnorm(50), X3 = rnorm(50),
taxa=c(tree$tip.label[1:40], paste("s", 51:60, sep="")),
D1=sample(c("Hello", "World"), 50, replace=TRUE), D2=rbinom(50,1,0.5),
D3=0.3+rbinom(50, 4, c(0.1,0.1,0.5,0.3)), XNA1 = c(rep(NA, 10), rnorm(40)))
dat
rownames(dat)
td <- make.treedata(tree, dat)
summary(td)
require(ape)
tree <- read.tree("Data/sampleTree.phy")
dat <- read.csv("Data/sampleData.csv")
# First notice some problems typical of comparative data
require(geiger)
name.check(tree, dat)
# Now we can glue these two together to make a "treedata" object
td <- make.treedata(tree, dat)
summary(td)
summary(td)
colnames(dat)
match(tree$tip.label, dat[,"taxa"])
match(dat[,"taxa"], tree$tip.label)
tree$tip.label
dat[,"taxa"]
td[1:10, 1, tip.label=TRUE]
td
td[1:10, 2, tip.label=TRUE]
td[[1]]
td[[2]]
td[['X1']]
td[1:10, 2, tip.label=TRUE]
plot(td)
td <- make.treedata(tree, dat)
td_po <- reorder(td, "postorder")
td
td_po
plot(td$phy)
td$dat
plot(td$phy)
plot(td_po$phy)
head(td$dat)
head(td_po$dat)
plot(td$phy)
plot(td_po$phy)
reorder(td, "postorder")
?reorder
td_s1 <- select(td, X1, D1)
summary(td_s1)
head(td_s1$dat)
td_s2<-select(td, 1:3)
td_s2
summary(td_s2)
td_f1<-filter(td, X1 > 0, D1=="Hello", is.na(XNA1)==FALSE)
summary(td_f1)
td_f1
td_m1<-mutate(td, Xall = (X1+X2+X3)/3, D1.binary = as.numeric(D1)-1)
td_m1
summary(td_m1)
td_m1["Xall"]
td_m1["D1.binary"]
td_m1["Xall", "D1.binary"]
td_m1[["Xall", "D1.binary"]]
td_m1[c("Xall", "D1.binary")]
td_s4<-select(td, starts_with("D"))
td_s4
td_s5<-select(td, ends_with("1"))
td_s5
td_s6<-select(td, matches("NA"))
td_s6
td_s7<-select(td, -matches("NA"))
td_s7
ltt.plot(td$phy)
phylosig(td$phy, getVector(td, X1))
require(phytools)
phylosig(td$phy, getVector(td, X1))
getVector(td, X1)
?getVector
getVector(td, X1)
td
getVector(td, D2)
treedply(td, phylosig(phy, getVector(td, X1), "K"))
treedply(td, list("K" = phylosig(phy, getVector(td, X1), "K"), "lambda" = phylosig(phy, getVector(td, X1),"lambda")))
tdDiscrete <- forceFactor(td)
tdNumeric <- forceNumeric(td)
tdNumeric <- filter(tdNumeric, !is.na(XNA1))
par(mfrow=c(2,3))
tdapply(tdNumeric, 2, phytools::phenogram, tree=phy, spread.labels=FALSE, ftype="off")
fitsBM <- tdapply(tdNumeric, 2, geiger::fitContinuous, phy=phy, model="BM")
sapply(fitsBM, function(x) x$opt$sigsq)
